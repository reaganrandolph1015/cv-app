{"ast":null,"code":"var _jsxFileName = \"/home/reagan/repos/cv-app/src/components/Editable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editable = _ref => {\n  _s();\n\n  let {\n    // possible fields for user/creator editing\n    text,\n    type,\n    placeholder,\n    children,\n    ...props\n  } = _ref;\n  // manage state to show label(default) or user input\n  const [isEditing, setEditing] = useState(false); // event handler while pressing key and editing\n\n  const handleKeyDown = (event, type) => {// handle when key pressed\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", { ...props,\n    children: isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      onBlur: () => setEditing(false),\n      onKeyDown: e => handleKeyDown(e, type),\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      onDoubleClick: () => setEditing(true),\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: text || placeholder || 'Editable content'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Editable, \"tuiZ/XkP3IIihHgOqim00M9Cb2U=\");\n\n_c = Editable;\nexport default Editable;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editable\");","map":{"version":3,"sources":["/home/reagan/repos/cv-app/src/components/Editable.js"],"names":["React","useState","Editable","text","type","placeholder","children","props","isEditing","setEditing","handleKeyDown","event","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,QAAQ,GAAG,QAOX;AAAA;;AAAA,MAPY;AAChB;AACAC,IAAAA,IAFgB;AAGhBC,IAAAA,IAHgB;AAIhBC,IAAAA,WAJgB;AAKhBC,IAAAA,QALgB;AAMhB,OAAGC;AANa,GAOZ;AACJ;AACA,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BR,QAAQ,CAAC,KAAD,CAAxC,CAFI,CAIJ;;AACA,QAAMS,aAAa,GAAG,CAACC,KAAD,EAAQP,IAAR,KAAiB,CACrC;AACD,GAFD;;AAIA,sBACE,wBAAaG,KAAb;AAAA,cACGC,SAAS,gBACR;AACE,MAAA,MAAM,EAAE,MAAMC,UAAU,CAAC,KAAD,CAD1B;AAEE,MAAA,SAAS,EAAGG,CAAD,IAAOF,aAAa,CAACE,CAAD,EAAIR,IAAJ,CAFjC;AAAA,gBAIGE;AAJH;AAAA;AAAA;AAAA;AAAA,YADQ,gBAQR;AAAK,MAAA,aAAa,EAAE,MAAMG,UAAU,CAAC,IAAD,CAApC;AAAA,6BACE;AAAA,kBAAON,IAAI,IAAIE,WAAR,IAAuB;AAA9B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AATJ;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAhCD;;GAAMH,Q;;KAAAA,Q;AAkCN,eAAeA,QAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst Editable = ({\n  // possible fields for user/creator editing\n  text,\n  type,\n  placeholder,\n  children,\n  ...props\n}) => {\n  // manage state to show label(default) or user input\n  const [isEditing, setEditing] = useState(false);\n\n  // event handler while pressing key and editing\n  const handleKeyDown = (event, type) => {\n    // handle when key pressed\n  };\n\n  return (\n    <section {...props}>\n      {isEditing ? (\n        <div\n          onBlur={() => setEditing(false)}\n          onKeyDown={(e) => handleKeyDown(e, type)}\n        >\n          {children}\n        </div>\n      ) : (\n        <div onDoubleClick={() => setEditing(true)}>\n          <span>{text || placeholder || 'Editable content'}</span>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default Editable;\n"]},"metadata":{},"sourceType":"module"}