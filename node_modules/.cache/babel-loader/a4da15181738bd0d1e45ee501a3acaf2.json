{"ast":null,"code":"var _jsxFileName = \"/home/reagan/repos/cv-app/src/components/Editable.js\",\n    _s = $RefreshSig$();\n\nimport { clear } from '@testing-library/user-event/dist/clear';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editable = _ref => {\n  _s();\n\n  let {\n    // possible fields for user/creator editing\n    text,\n    type,\n    placeholder,\n    children,\n    ...props\n  } = _ref;\n  // manage state to show label(default) or user input\n  const [isEditing, setEditing] = useState(false);\n\n  const handleKeyDown = (event, type) => {// handle when key is pressed\n  };\n\n  const updateValue = () => {\n    setEditing({\n      isEditing: false\n    });\n  };\n\n  const renderEditView = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onBlur: () => setEditing(false),\n      onKeyDown: e => handleKeyDown(e, type),\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderDefault = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onDoubleClick: () => setEditing(true),\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: text || placeholder || 'Editable content'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", { ...props,\n    children: isEditing ? renderEditView() : renderDefault()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Editable, \"tuiZ/XkP3IIihHgOqim00M9Cb2U=\");\n\n_c = Editable;\nexport default Editable;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editable\");","map":{"version":3,"sources":["/home/reagan/repos/cv-app/src/components/Editable.js"],"names":["clear","React","useState","Editable","text","type","placeholder","children","props","isEditing","setEditing","handleKeyDown","event","updateValue","renderEditView","e","renderDefault"],"mappings":";;;AAAA,SAASA,KAAT,QAAsB,wCAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,QAAQ,GAAG,QAOX;AAAA;;AAAA,MAPY;AAChB;AACAC,IAAAA,IAFgB;AAGhBC,IAAAA,IAHgB;AAIhBC,IAAAA,WAJgB;AAKhBC,IAAAA,QALgB;AAMhB,OAAGC;AANa,GAOZ;AACJ;AACA,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;;AAEA,QAAMS,aAAa,GAAG,CAACC,KAAD,EAAQP,IAAR,KAAiB,CACrC;AACD,GAFD;;AAIA,QAAMQ,WAAW,GAAG,MAAM;AACxBH,IAAAA,UAAU,CAAC;AACTD,MAAAA,SAAS,EAAE;AADF,KAAD,CAAV;AAGD,GAJD;;AAMA,QAAMK,cAAc,GAAG,MAAM;AAC3B,wBACE;AACE,MAAA,MAAM,EAAE,MAAMJ,UAAU,CAAC,KAAD,CAD1B;AAEE,MAAA,SAAS,EAAGK,CAAD,IAAOJ,aAAa,CAACI,CAAD,EAAIV,IAAJ,CAFjC;AAAA,gBAIGE;AAJH;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GATD;;AAWA,QAAMS,aAAa,GAAG,MAAM;AAC1B,wBACE;AAAK,MAAA,aAAa,EAAE,MAAMN,UAAU,CAAC,IAAD,CAApC;AAAA,6BACE;AAAA,kBAAON,IAAI,IAAIE,WAAR,IAAuB;AAA9B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAND;;AAQA,sBACE,wBAAaE,KAAb;AAAA,cACGC,SAAS,GAAGK,cAAc,EAAjB,GAAsBE,aAAa;AAD/C;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA7CD;;GAAMb,Q;;KAAAA,Q;AA+CN,eAAeA,QAAf","sourcesContent":["import { clear } from '@testing-library/user-event/dist/clear';\nimport React, { useState } from 'react';\n\nconst Editable = ({\n  // possible fields for user/creator editing\n  text,\n  type,\n  placeholder,\n  children,\n  ...props\n}) => {\n  // manage state to show label(default) or user input\n  const [isEditing, setEditing] = useState(false);\n\n  const handleKeyDown = (event, type) => {\n    // handle when key is pressed\n  };\n\n  const updateValue = () => {\n    setEditing({\n      isEditing: false,\n    });\n  };\n\n  const renderEditView = () => {\n    return (\n      <div\n        onBlur={() => setEditing(false)}\n        onKeyDown={(e) => handleKeyDown(e, type)}\n      >\n        {children}\n      </div>\n    );\n  };\n\n  const renderDefault = () => {\n    return (\n      <div onDoubleClick={() => setEditing(true)}>\n        <span>{text || placeholder || 'Editable content'}</span>\n      </div>\n    );\n  };\n\n  return (\n    <section {...props}>\n      {isEditing ? renderEditView() : renderDefault()}\n    </section>\n  );\n};\n\nexport default Editable;\n"]},"metadata":{},"sourceType":"module"}